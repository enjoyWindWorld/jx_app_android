/*
 * 同步滤芯寿命广播
*/
package com.kxw.smarthome.receiver;

import java.util.ArrayList;
import java.util.List;

import org.json.JSONException;
import org.json.JSONObject;
import org.xutils.x;
import org.xutils.common.Callback.CommonCallback;
import org.xutils.http.RequestParams;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.os.HandlerThread;
import android.serialport.api.SerialPortUtil;

import com.kxw.smarthome.MyApplication;
import com.kxw.smarthome.entity.BaseData;
import com.kxw.smarthome.entity.FilterLifeInfo;
import com.kxw.smarthome.entity.OptionDescriptionInfo;
import com.kxw.smarthome.entity.OptionDescriptions;
import com.kxw.smarthome.entity.VerificationData;
import com.kxw.smarthome.utils.ConfigUtils;
import com.kxw.smarthome.utils.DBUtils;
import com.kxw.smarthome.utils.DataProcessingUtils;
import com.kxw.smarthome.utils.JsonUtils;
import com.kxw.smarthome.utils.MyLogger;
import com.kxw.smarthome.utils.NetUtils;
import com.kxw.smarthome.utils.SharedPreferencesUtil;
import com.kxw.smarthome.utils.Utils;

public class SyncFilterLifeReceiver extends BroadcastReceiver {  

	private SerialPortUtil mSerialPortUtil;
	private BaseData mBaseData;
	private Context mContext;
	private FilterLifeInfo mFilterLifeInfo, mDataFilterLifeInfo;
	private boolean isSuccess;
	private OptionDescriptions optionDescriptions = new OptionDescriptions();
	private List<OptionDescriptionInfo> options = new ArrayList<OptionDescriptionInfo>();
	private OptionDescriptionInfo optionDescriptionInfo = new OptionDescriptionInfo();
	VerificationData verificationData;
	
	private Handler mFilterLifeHandler;  
	private HandlerThread mFilterLifeHandlerThread;  
	
	private Handler mReductionFilterLifeHandler;  
	private HandlerThread mReductionFilterLifeHandlerThread;  
	
	@Override  
	public void onReceive(Context context, Intent intent){  
		if(intent.getAction().equals(ConfigUtils.sync_filter_life_action)){
			mSerialPortUtil =MyApplication.getSerialPortUtil();
			this.mContext = context;
			mFilterLifeHandlerThread = new HandlerThread("SyncFilterLifeReceiver_mFilterLifeHandlerThread", 5);  
			mFilterLifeHandlerThread.start();  
			mFilterLifeHandler = new Handler(mFilterLifeHandlerThread.getLooper()); 
			
			mReductionFilterLifeHandlerThread = new HandlerThread("SyncFilterLifeReceiver_mReductionFilterLifeHandlerThread", 5);  
			mReductionFilterLifeHandlerThread.start();  
			mReductionFilterLifeHandler = new Handler(mReductionFilterLifeHandlerThread.getLooper()); 
	    	getFilterLife();
		}
		
	}
	
	//获取对应省份的滤芯寿命
	public void getFilterLife(){
		
		if(!NetUtils.isConnected(mContext) || SharedPreferencesUtil.getStringData(mContext, "province", "").equals("")){
			return;
		}
		JSONObject jObj = new JSONObject();
		try {
			jObj.accumulate("code", SharedPreferencesUtil.getStringData(mContext, "province", ""));
		} catch (Exception e) {
		}
		MyLogger.getInstance().e(jObj.toString());
		RequestParams params= new RequestParams(ConfigUtils.get_elementLife_url);
		params.setBodyContent(DataProcessingUtils.encrypt(jObj.toString()));
		params.setConnectTimeout(10000);
		x.http().post(params, new CommonCallback<String>() {

			@Override
			public void onCancelled(CancelledException arg0) {
				// TODO Auto-generated method stub
			}
			@Override
			public void onError(Throwable arg0, boolean arg1) {
				// TODO Auto-generated method stub
			}
			@Override
			public void onFinished() {
				// TODO Auto-generated method stub
			}
			@Override
			public void onSuccess(String response) {
				// TODO Auto-generated method stub
				mFilterLifeInfo = new FilterLifeInfo();
				if(JsonUtils.result(response)==0){				
					List<FilterLifeInfo> list= new ArrayList<FilterLifeInfo>();
					try {
						list.addAll(JsonUtils.jsonToArrayList(DataProcessingUtils.decode(new JSONObject(response).getString("data")),FilterLifeInfo.class));
					} catch (JSONException e) {
						e.printStackTrace();
					}
					if(list!=null&&list.size()>0){
						mFilterLifeInfo= list.get(0);
						mBaseData=mSerialPortUtil.returnBaseData();
						mDataFilterLifeInfo = DBUtils.getFirstData(FilterLifeInfo.class);
						verificationData = new VerificationData(mContext);
						if(mDataFilterLifeInfo != null  && mBaseData != null && verificationData != null)
						{	
							
							if(mFilterLifeInfo.cto != mDataFilterLifeInfo.cto
									|| mFilterLifeInfo.pp != mDataFilterLifeInfo.pp
									|| mFilterLifeInfo.ro != mDataFilterLifeInfo.ro
									|| mFilterLifeInfo.t33 != mDataFilterLifeInfo.t33
									|| mFilterLifeInfo.wfr != mDataFilterLifeInfo.wfr)
							{
								mFilterLifeInfo._id=1;
								isSuccess = false;
								try {	
									
									//先判断存到数据库有没有成功
									boolean isSaveSuccess = false;
									int loop = 0;
									DBUtils.deleteAll(FilterLifeInfo.class);
									do {
										isSaveSuccess = DBUtils.saveDB(mFilterLifeInfo);
										loop ++;
									} while (!isSaveSuccess && loop <= 10);
									
									if(isSaveSuccess)
									{
										mFilterLifeHandler.post(mFilterLifeRunnable);
									}
								} catch (Exception e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}
//							else if(mDataFilterLifeInfo.pp == 500 
//									&& mDataFilterLifeInfo.cto == 800
//									&& mDataFilterLifeInfo.ro == 2000
//									&& mDataFilterLifeInfo.t33 == 2000
//									&& mDataFilterLifeInfo.wfr == 2000)
//							{
//								//让已经修改过的加回来回来
//								if(mBaseData.firstFilter <= 200
//										&& mBaseData.secondFilter <= 320
//										&& mBaseData.thirdFilter <= 650
//										&& mBaseData.fourthFilter <= 650
//										&& mBaseData.fivethFilter <= 650)
//								{
//									mReductionFilterLifeHandler.post(mReductionFilterLifeRunnable);
//								}
//							}
						}
					}
				}
			}
		});
	}
	
	//设置滤芯使用寿命	
	private Runnable mFilterLifeRunnable = new Runnable() {  
	    @Override  
	    public void run() {
			if(!Utils.inuse){//串口没有使用
				Utils.inuse = true;
				int try_times=0;
				int pp = 0, cto = 0, ro = 0, t33 = 0, wft = 0;
				if(mBaseData.firstFilter > 0)//没用完的时候
				{
					int diff = mFilterLifeInfo.pp - mDataFilterLifeInfo.pp;//差值
					int verificationPPDiff = verificationData.getFirstFilter() + diff;//验证值的差值
					System.out.println("==fuck you== pp:"+diff);
					pp = mBaseData.firstFilter + diff;//加上去
					verificationData.setFirstFilter(verificationPPDiff);
				}
				
				if(mBaseData.secondFilter > 0)//没用完的时候
				{
					int diff = mFilterLifeInfo.cto - mDataFilterLifeInfo.cto;//差值
					int verificationCTODiff = verificationData.getSecondFilter() + diff;//验证值的差值
					System.out.println("==fuck you== cto:"+diff);
					cto = mBaseData.secondFilter + diff;//加上去
					verificationData.setSecondFilter(verificationCTODiff);
				}
				
				if(mBaseData.thirdFilter > 0)//没用完的时候
				{
					int diff = mFilterLifeInfo.ro - mDataFilterLifeInfo.ro;//差值
					int verificationRODiff = verificationData.getThirdFilter() + diff;//验证值的差值
					System.out.println("==fuck you== ro:"+diff);
					ro = mBaseData.thirdFilter + diff;//加上去
					verificationData.setThirdFilter(verificationRODiff);
				}
				
				if(mBaseData.fourthFilter > 0)//没用完的时候
				{
					int diff = mFilterLifeInfo.t33 - mDataFilterLifeInfo.t33;//差值
					int verificationT33Diff = verificationData.getFourthFilter() + diff;//验证值的差值
					System.out.println("==fuck you== t33:"+diff);
					t33 = mBaseData.fourthFilter + diff;//加上去
					verificationData.setFourthFilter(verificationT33Diff);
				}
				
				if(mBaseData.fivethFilter > 0)//没用完的时候
				{
					int diff = mFilterLifeInfo.wfr -mDataFilterLifeInfo.wfr;//差值
					int verificationWFTDiff = verificationData.getFivethFilter() + diff;//验证值的差值
					System.out.println("==fuck you== wft:"+diff);
					wft = mBaseData.fivethFilter + diff;//加上去
					verificationData.setFivethFilter(verificationWFTDiff);
				}
				
	//			int life[] = {500, 800, 2000, 2000, 2000};
				int life[] = {pp<0?0:pp, cto<0?0:cto, ro<0?0:ro, t33<0?0:t33, wft<0?0:wft};
				System.out.println("==fuck you== "+mDataFilterLifeInfo.toString());
				System.out.println("==fuck you== "+life[0]+" , "+life[1]+" , "+life[2]+" , "+life[3]+" , "+life[4]);
				
				while(try_times<2){
					if(mSerialPortUtil.setFilterLife(life, life.length)>0 && mSerialPortUtil.getReturn()>=0){
						try_times++;
						isSuccess = true;
					}else{
						try_times++;
					}
				};
				
				Utils.inuse = false;
				
				if(isSuccess)
				{				
					optionDescriptionInfo.setId("1");
					optionDescriptionInfo.setParam("code:"+SharedPreferencesUtil.getStringData(mContext, "province", ""));
					optionDescriptionInfo.setOption("SyncFilterLifeReceiver:广播触发同步滤芯寿命操作");
					optionDescriptionInfo.setLocalDate("原来的BaseData数据："+mBaseData.toString()+";"+"原来的滤芯寿命初始数据："+mDataFilterLifeInfo.toString());
					optionDescriptionInfo.setNetDate("查询到的对应城市的滤芯寿命："+mFilterLifeInfo.toString());
					options.clear();
					options.add(optionDescriptionInfo);
					optionDescriptions.setDates(options);
					
					Intent intent = new Intent(ConfigUtils.upload_option_description_action);
					intent.putExtra("options", optionDescriptions);
					mContext.sendBroadcast(intent);
				}
			}
		}  
	}; 
	
	//设置滤芯使用寿命	
	private Runnable mReductionFilterLifeRunnable = new Runnable() {  
	    @Override  
	    public void run() {
			if(!Utils.inuse){//串口没有使用
				Utils.inuse = true;
				int try_times=0;
				int pp = 0, cto = 0, ro = 0, t33 = 0, wft = 0;
				if(mBaseData.firstFilter > 0)//没用完的时候
				{
					int diff = 500 - 200;//差值
					if(mBaseData.firstFilter >= 195)
					{
						diff -= 40;
					}
					System.out.println("==fuck you== 还原pp:"+diff);
					pp = mBaseData.firstFilter + diff;//加上去
				}
				
				if(mBaseData.secondFilter > 0)//没用完的时候
				{
					int diff = 800 - 320;//差值
					if(mBaseData.secondFilter >= 315)
					{
						diff -= 40;
					}
					System.out.println("==fuck you== 还原cto:"+diff);
					cto = mBaseData.secondFilter + diff;//加上去
				}
				
				if(mBaseData.thirdFilter > 0)//没用完的时候
				{
					int diff = 2000 - 650;//差值
					if(mBaseData.thirdFilter >= 645)
					{
						diff -= 40;
					}
					System.out.println("==fuck you== 还原ro:"+diff);
					ro = mBaseData.thirdFilter + diff;//加上去
				}
				
				if(mBaseData.fourthFilter > 0)//没用完的时候
				{
					int diff = 2000 - 650;//差值
					if(mBaseData.fourthFilter >= 645)
					{
						diff -= 40;
					}
					System.out.println("==fuck you== 还原t33:"+diff);
					t33 = mBaseData.fourthFilter + diff;//加上去
				}
				
				if(mBaseData.fivethFilter > 0)//没用完的时候
				{
					int diff = 2000 - 650;//差值
					if(mBaseData.fivethFilter >= 645)
					{
						diff -= 40;
					}
					System.out.println("==fuck you== 还原wft:"+diff);
					wft = mBaseData.fivethFilter + diff;//加上去
				}
				
				int life[] = {pp<0?0:pp, cto<0?0:cto, ro<0?0:ro, t33<0?0:t33, wft<0?0:wft};
				System.out.println("==fuck you== 还原=="+mDataFilterLifeInfo.toString());
				System.out.println("==fuck you== 还原=="+life[0]+" , "+life[1]+" , "+life[2]+" , "+life[3]+" , "+life[4]);
				
				while(try_times<2){
					if(mSerialPortUtil.setFilterLife(life, life.length)>0 && mSerialPortUtil.getReturn()>=0){
						try_times++;
						isSuccess = true;
					}else{
						try_times++;
					}
				};
				
				Utils.inuse = false;
				
				if(isSuccess)
				{				
					optionDescriptionInfo.setId("1");
					optionDescriptionInfo.setParam("code:"+SharedPreferencesUtil.getStringData(mContext, "province", ""));
					optionDescriptionInfo.setOption("SyncFilterLifeReceiver:广播触发同步滤芯寿命操作");
					optionDescriptionInfo.setLocalDate("原来的BaseData数据："+mBaseData.toString()+";"+"原来的滤芯寿命初始数据："+mDataFilterLifeInfo.toString());
					optionDescriptionInfo.setNetDate("查询到的对应城市的滤芯寿命："+mFilterLifeInfo.toString());
					options.clear();
					options.add(optionDescriptionInfo);
					optionDescriptions.setDates(options);
					
					Intent intent = new Intent(ConfigUtils.upload_option_description_action);
					intent.putExtra("options", optionDescriptions);
					mContext.sendBroadcast(intent);
				}
			}
		}  
	}; 
}